#!/bin/bash
# debug
set -e

VIM_SOURCE="$VIMENV_ROOT"/src
OPT_LIST_ALL=0
scm_type=hg
detect_scm_types="hg git"

[ -n "$VIMENV_DEBUG" ] && set -x
if [ ! -d "$VIMENV_ROOT"/versions ]; then
  mkdir "$VIMENV_ROOT"/versions
fi

# set configure

### util functions {{{
echored() {
  echo -e "\e[00;31m$*\e[00m"
}
echogreen() {
  echo -e "\e[00;32m$*\e[00m"
}
echoyellow() {
  echo -e "\e[00;33m$*\e[00m"
}
### }}}

### scm functions {{{
### scm utils {{{
detect_scm_type() {
  if [ -e "$VIM_SOURCE" ]; then
    for type in $detect_scm_types; do
      if [ -e "$VIM_SOURCE/.$type" ]; then
        scm_type=$type
        return
      fi
    done
  fi
  for type in $detect_scm_types; do
    if which $type >/dev/null 2>&1 ;then
      scm_type=$type
      return
    fi
  done
}

tag2ver_filter() {
  sed -e 's/-/./g'
}

ver2tag_filter() {
  sed -e 's/\./-/g'
}

is_need_update() {
  local cwd=`pwd`
  local here="$(cd "$(dirname "${BASH_SOURCE:-$0}")"; pwd)"
  cd "$cwd"

  local todayfile="$here/../tmp/run-`date +'%Y%m%d'`"
  if [ ! -e "$todayfile" ]; then
    find "$here/../tmp/" -type f -name 'run-*' -mtime 0 -exec rm {} \;
    touch $todayfile
    return 0
  fi
  return 1
}
### }}}

### build utils {{{
is_osx() {
  return $([ "$(uname -s)" = "Darwin" ])
}

prefer_filepath() {
  local relpath=$1
  if [ x"$relpath" = x ]; then
    return
  fi

  local cwd=`pwd`
  local here="$(cd "$(dirname "${BASH_SOURCE:-$0}")"; pwd)"
  cd "$cwd"

  if is_osx && [ -e "$here/../$relpath.osx" ]; then
    echo "$here/../$relpath.osx"
    return
  fi
  if [ -e "$here/../$relpath" ]; then
    echo "$here/../$relpath"
    return
  fi
  if is_osx && [ -e "$VIMENV_ROOT/$relpath.osx" ]; then
    echo "$VIMENV_ROOT/$relpath.osx"
    return
  fi
  echo "$VIMENV_ROOT/$relpath"
}

source_setenv() {
  local fpath=$(prefer_filepath "share/setenv")
  [ -e "$fpath" ] && source "$fpath"
}

apply_patches() {
  if [ -e "$VIMENV_ROOT/share/p1_patches" ] ;then
    for url in `cat "$VIMENV_ROOT/share/p1_patches" | grep -v '^#'`; do
      curl -Ls -o _patch "$url"
      if ! patch -p1 < _patch ; then
        rm _patch
        echored "fail: applied patch: $url" >&2
        exit 1
      fi
      rm _patch
      echogreen "applied patch: $url"
    done
  fi
}

configure_option() {
  local cwd=`pwd`
  local here="$(cd "$(dirname "${BASH_SOURCE:-$0}")"; pwd)"
  cd "$cwd"

  local fpath=$(prefer_filepath "share/option")
  cat $fpath | sed -e 's/\\$//g' | grep -v '^#'
}
### }}}

### interface functions {{{
source_clone() {
  ${scm_type}_clone "$@"
}

source_update() {
  ${scm_type}_reset
  if is_need_update; then
    ${scm_type}_update "$@"
  fi
}

source_tags() {
  local cwd=`pwd`
  cd "$VIM_SOURCE"
  if [ "$OPT_LIST_ALL" = "0" ]; then
    ${scm_type}_tags "$@" | tag2ver_filter
  else
    ${scm_type}_tags all "$@" | tag2ver_filter
  fi
  cd "$cwd"
}
source_checkout() {
  local rev=`echo "$1" | ver2tag_filter`
  shift
  ${scm_type}_checkout "$rev" "$@"
}
### }}}

## git functions {{{
git_clone() {
  git clone "https://github.com/vim-jp/vim.git" $VIM_SOURCE
}
git_reset() {
  git reset HEAD --hard >/dev/null 2>&1
}
git_update() {
  git pull origin master
}
git_tags() {
  if [ x"$1" = x ]; then
    git tag | grep -ve "-[0-9][a-z]" | tail -n 20
  elif [ x"$1" = x"all" ]; then
    git tag
  else
    git tag | tail -n $1
  fi
}
git_checkout() {
  if [ x"$1" = x -o x"$1" = x"latest" ]; then
    git checkout master
  else
    git checkout "$1"
  fi
}
### }}}

### hg functions {{{
hg_clone() {
  hg clone https://vim.googlecode.com/hg "$VIM_SOURCE"
}
hg_reset() {
  hg update --clean >/dev/null 2>&1
}
hg_update() {
  hg pull -u
}
hg_tags() {
  if [ x"$1" = x ]; then
    hg tags | head -n 20 | awk '{print $1}'
  elif [ x"$1" = x"all" ]; then
    hg tags | awk '{print $1}'
  else
    hg tags | head -n $1 | awk '{print $1}'
  fi
}
hg_checkout() {
  if [ x"$1" = x -o x"$1" = x"latest" ]; then
    hg update
  else
    hg update -C "$1"
  fi
}
### }}}

### }}}

### function {{{
# error usage
usage_exit() {
  echo "Usage: vimenv install [-f tar.gz] [-o dir] -- [version]" 1>&2
  exit 1
}

# error remove
not_remove_file() {
  echo "bye!" 1>&2
  exit 1
}

# select build source
install_source() {
  local cwd=`pwd`
  if [ $F_FLG -ne 0 ]; then
    if [ ! -e "$VIM_SOURCE" ]; then
      source_clone
    fi

    cd "$VIM_SOURCE"
    source_update
  else
    [ -e "$VIM_SOURCE" ] && mv $VIM_SOURCE $VIM_SOURCE.${scm_type}
    tar xvf "$VIM_ARCHIVE" -C "$VIM_SOURCE"
    cd $(find "$VIM_SOURCE" -mindepth 1 -maxdepth 1 -type d |sed 1q)
    cp -rp ./ "$VIM_SOURCE"
    # find "$VIM_SOURCE" -mindepth 2 -exec mv {} -t "$VIM_SOURCE" \;
  fi
  cd "$cwd"
}

# configure
configure() {
  source_checkout $VIM_VERSION
  source_setenv
  apply_patches
  make distclean >/dev/null 2>&1
  ./configure --prefix=$VIMENV_ROOT/versions/"$VIM_VERSION" `configure_option`
}

build() {
  if make -f "$VIM_SOURCE"/Makefile && make install; then
    return 0
  fi
  return 1
}

# restore repository source
finalize() {
  if [ -e "$VIM_SOURCE.{$scm_type}" ] ;then
    rm -rf "$VIM_SOURCE"
    mv "$VIM_SOURCE.${scm_type}" "$VIM_SOURCE"
  fi
}
# remove source directory
clean() {
  if [ -e "$VIM_SOURCE" ]; then
    rm -rf "$VIM_SOURCE"
    echo "removed: $VIM_SOURCE"
  fi
}
# }}}

detect_scm_type
O_FLG=1
F_FLG=1
# set options {{{
while getopts "f:o:cl" OPT
do
  case $OPT in
    o)
      VIM_VERSION="$OPTARG"
      O_FLG=0
      ;;
    f)
      VIM_ARCHIVE="$OPTARG"
      F_FLG=0
      ;;
    l)
      install_source
      source_tags
      exit 0
      ;;
    c)
      clean
      exit 0
      ;;
    *)
      usage_exit
      ;;
  esac
done

# delete options
shift `expr $OPTIND - 1`
# OPT_CONFIG="$@"
# }}}

if [ "$VIM_VERSION" = "" ]; then
  VIM_VERSION="$1"
  if [ "$VIM_VERSION" = "" ]; then
    usage_exit
  fi
  shift
fi

# set argument
if [ $O_FLG -eq 0 -a ! -n "$VIM_VERSION" ]; then
  usage_exit
fi
if [ $O_FLG -ne 0 -a "$VIM_VERSION" = "" ]; then
  VIM_VERSION="vim"
  if [ $F_FLG -ne 0 ]; then
    usage_exit
  fi
fi

if [ $F_FLG -eq 0 -a ! -n "$VIM_ARCHIVE" ]; then
  usage_exit
fi

if [ -e "$VIMENV_ROOT"/versions/"$VIM_VERSION" ]; then
  while true
  do
    echo "Can I delete directory?[yes|no]"
    read ans

    case ${ans} in
      [Yy]|[Yy][Ee][Ss])
        rm -rf "$VIMENV_ROOT"/versions/"$VIM_VERSION"
        break
        ;;
      [Nn]|[Nn][Oo])
        not_remove_file
        break
        ;;
      *)
        not_remove_file
        break
        ;;
    esac
  done
fi

# select source
install_source

trap finalize EXIT
cd "$VIM_SOURCE"
configure && build && finalize
